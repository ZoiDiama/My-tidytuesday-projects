#Stack Overflow Annual Developer Survey 2024
#2024: week 36 


#load key libraries 
library(tidytuesdayR)# Access data for the #TidyTuesday project.
library(dplyr)
library(ggplot2)
library(tidyverse) # Collection of tools for data manipulation and visualization.
library(showtext) #Easily use custom fonts in plots.Allows the use of google fonts
library(glue)#Simple string formatting and interpolation.
library(Cairo) #High-quality graphics rendering for plots.

#additional libraries
library(ggtext) #Allows rich text formatting (Markdown/HTML) in ggplot.
library(forcats) #Tools for handling categorical variables (factors).
library(ggrepel) #Avoids overlapping labels in ggplot2.
library(lubridate)#Simplifies working with dates and times.
library(ggridges) #Create ridge/joy plots for visualizing distributions.

#for the plot


## Load Google fonts (https://fonts.google.com/)
font_add_google("Lato", family = "title")                           
font_add_google("Lato", family = "subtitle")
font_add_google("Lato", family = "x")
showtext::showtext_auto()
showtext::showtext_opts(dpi = 300) 

#1.DATA LOADING
tuesdata <- tidytuesdayR::tt_load(2024, week = 36)
qname_levels_single_response_crosswalk <- tuesdata$qname_levels_single_response_crosswalk
stackoverflow_survey_questions <- tuesdata$stackoverflow_survey_questions
stackoverflow_survey_single_response <- tuesdata$stackoverflow_survey_single_response

#2.DATA WRANGLING
dt <- stackoverflow_survey_single_response %>%
  select(ed_level, years_code_pro,dev_type, converted_comp_yearly) %>%
  filter(converted_comp_yearly<1000000) %>% 
  na.omit() %>%
  mutate(converted_comp_yearly_thousands=converted_comp_yearly/1000) %>% 
  mutate(compensation_level = cut(converted_comp_yearly,
                                  breaks = c(-Inf, 50000, 100000, 150000, Inf),
                                  labels = c("Low", "Medium", "High", "Very High"))) %>% 
  mutate(years_code_category = cut(years_code_pro,
                                   breaks = c(-Inf, 5, 10, 20, 50, Inf),
                                   labels = c("0-5", "6-10", 
                                              "11-20", "21-50", 
                                              "51+"))) %>% 
  mutate(ed_level_category = factor(ed_level,
                                    labels = c("Associate degree",
                                               "Bachelor’s degree",
                                               "Master’s degree",
                                               "Primary/elementary school",
                                               "Professional degree",
                                               "Secondary school",
                                               "Some study without earning a degree",
                                               "Something else"),
                                    levels = c(1, 2, 3, 4, 5, 6, 7, 8))) %>% 
  mutate(comp_cut=as.factor(ifelse(converted_comp_yearly>median(converted_comp_yearly),
                                   "Above","Below")))


#3. PLOT VIZUALIZATION 
##Title,subtitle & caption 
tt <- str_glue(stringr::str_wrap("Stack Overflow Annual Developer Survey 2024", width = 80))
st <- str_glue(stringr::str_wrap("Annual compensation by education level and 
                                 professional coding experience (N=23,272)", 
                                 width = 80))

ct  <- "Data source:2024 Stack Overflow Annual Developer Survey | Creator:Zoi Diamantakou | tidytuesday | 2024,week 36\nNote: Missing and extreme values were excluded from the graph"

##plot
p<-
  ggplot(dt, aes(x = ed_level_category, 
                 y = converted_comp_yearly_thousands,
                 color=years_code_category)) +
  geom_jitter(width = 0.3, height = 0.1) +
  scale_y_continuous(labels = scales::dollar_format()) +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 20),limits=rev)+
  scale_color_brewer(palette = "Set2")+
  labs(title=tt,subtitle = st,caption = ct,
       x="Education level",y="Annual compensation (in thousand $)",
       color="Years of professional \ncoding experience")+
  coord_flip()



p+theme_minimal()+
  theme(plot.margin= margin(t = 20, r = 20, b = 20, l = 20),
        plot.title= element_text(family= 'title',face= "bold",
                                 size= 20,hjust = 0,colour="#19201D"),
        plot.subtitle = element_text(family= 'subtitle', hjust = 0,
                                     lineheight= 0.9,size  = 14,colour="black"),
        plot.caption = element_text(colour="black",size=10, hjust = 0,family='x'),
        plot.title.position = "plot", 
        plot.subtitle.position = "plot", 
        plot.caption.position = "plot",
        #axis text
        axis.title.x = element_text(family="x",size=12,face="italic"),
        axis.title.y = element_blank(),
        axis.text.x = element_text(family="x",size=12,vjust =0.5),
        axis.text.y = element_text(family="x",size=12,vjust =0), #or element_blank()
        #legend
        legend.position = "top",
        legend.justification='left',
        legend.title = element_text(family = "x", color = "grey40", size = 10, hjust = 0), # Add hjust to left-align the title
        # bring legend items closer
        legend.spacing.x = unit(0.1, 'cm'),  
        legend.key.height = unit(0.25, "lines"),
        legend.key.width = unit(2, "lines"),
        #grid
        panel.grid = element_blank(),
        panel.grid.major.x = element_line(color = "#dedddd", linewidth = 0.5, linetype = 1),  # Corrected to element_line
        panel.grid.major.y = element_blank(),
        axis.line.x = element_line(color = "#dedddd", linewidth = 0.5, linetype = 1),  
        axis.line.y = element_blank(), 
        axis.ticks= element_blank(), 
        axis.ticks.x = element_line(color = "#dedddd",linewidth = 0.5),
        #background
        plot.background = element_rect(fill = "white", color = NA))+
  guides(color = guide_legend(nrow = 2, byrow = TRUE))  # Split legend into 2 rows


#4. SAVE THE PLOT
ggsave("TT2024Week_36.png", width = 8, height = 8,type = "Cairo",dpi = 300, bg = "white") 
ggsave("TT2024Week_36.svg", width = 8, height = 8,dpi = 300, bg = "white")
browseURL("TT2024Week_36.svg")



